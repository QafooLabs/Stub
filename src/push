#!/usr/bin/env php
<?php

// CLI argument handling
if ( !isset( $argv[1] ) )
{
    echo "No target database specified.\n";
    exit( 1 );
}

// Connection default parameters
$connectionDefaults = array(
    'scheme'   => 'http',
    'user'     => null,
    'password' => null,
    'host'     => 'localhost',
    'port'     => 5984,
    'path'     => '/test'
);

$target = parse_url( $argv[1] );
$target += $connectionDefaults;

// CLI argument handling
if ( !isset( $argv[2] ) || !is_dir( $argv[2] ) )
{
    echo "No path to application specified.\n";
    exit( 1 );
}
$baseDir = realpath( $argv[2] );
$name    = basename( $baseDir );

// Ensure target database exists
try {
    http_request( $target, $target['path'] );
} catch ( Exception $e ) {
    http_request( $target, $target['path'], 'PUT' );
}

$document = new StdClass();
$document->id           = '_design/' . $name;
$document->_attachments = array();
$document->views        = array();
$document->rewrites     = array();
$document->filters      = array();
$document->lists        = array();
$document->shows        = array();
$document->modules      = array();
$document->language     = "javascript";

// Check if there already is a design doc
try {
    $oldDoc         = json_decode( http_request( $target, $path = $target['path'] . '/' . $document->id ) );
    $document->_rev = $oldDoc->_rev;
} catch ( Exception $e ) {
    // Ignore: Document is missing, which is just cool…
}

// Find all files to upload
foreach ( new RecursiveIteratorIterator(
        new RecursiveDirectoryIterator(
            $htdocsBase = $baseDir . '/htdocs/',
            FilesystemIterator::SKIP_DOTS
        )
    ) as $file )
{
    $localName = str_replace( $htdocsBase, '', $file->getRealPath() );
    $document->_attachments[$localName] = array(
        'type'         => 'base64',
        'data'         => base64_encode( file_get_contents( $file ) ),
        'content_type' => getMimeType( $file ),
    );
}

// Add views
$views = array();
foreach ( glob( $baseDir . '/views/*/*.js' ) as $file )
{
    $localName = str_replace( $baseDir . '/views/', '', $file );
    $name      = pathinfo( $localName, PATHINFO_FILENAME );
    $type      = dirname( $localName );
    $document->views[$type][$name] = trim( file_get_contents( $file ) );
}

// Add filters, show and list functions
$views = array();
foreach ( glob( $baseDir . '/{filters,lists,shows,modules}/*.js', GLOB_BRACE ) as $file )
{
    $localName = str_replace( $baseDir . '/', '', $file );
    $name      = pathinfo( $localName, PATHINFO_FILENAME );
    $type      = dirname( $localName );
    $document->{$type}[$name] = trim( file_get_contents( $file ) );
}

// Add rewrites
$rewriteFile = $baseDir . '/rewrites.js';
if ( is_file( $rewriteFile ) && ( $contents = trim( file_get_contents( $rewriteFile ) ) ) )
{
    $document->rewrites = json_decode( $contents, true );
}

// Add rewrites
$validateFile = $baseDir . '/validate.js';
if ( is_file( $validateFile ) && ( $contents = trim( file_get_contents( $validateFile ) ) ) )
{
    $document->validate_doc_update = $contents;
}

http_request( $target, $path, 'PUT', json_encode( $document ) );

/***
 * Helper functions
 */

/**
 * Execute a HTTP request
 *
 * Will throw an exception if the server responds with a status >= 400 or on
 * connection failure.
 *
 * Returns the response body on success as a string.
 *
 * @param array $host
 * @param string $path
 * @param string $method
 * @param mixed $data
 * @return string
 */
function http_request( array $host, $path, $method = 'GET', $data = null )
{
    $httpFilePointer = @fopen(
        $url = $host['scheme'] . '://' . $host['user'] . ':' . $host['pass'] . '@' . $host['host']  . ':' . $host['port'] . $path,
        'r',
        false,
        stream_context_create(
            array(
                'http' => array(
                    'method'        => $method,
                    'content'       => $data,
                    'ignore_errors' => true,
                    'header'        => 'Content-type: application/json',
                ),
            )
        )
    );

    // Check if connection has been established successfully
    if ( $httpFilePointer === false )
    {
        $error = error_get_last();
        throw new Exception( "Could not connect to server at $url: $error" );
    }

    // Read request body
    $body = '';
    while ( !feof( $httpFilePointer ) )
    {
        $body .= fgets( $httpFilePointer );
    }

    $metaData   = stream_get_meta_data( $httpFilePointer );
    // This depends on wheather PHP is installed with curl stream wrappers or
    // not…
    $rawHeaders = isset( $metaData['wrapper_data']['headers'] ) ? $metaData['wrapper_data']['headers'] : $metaData['wrapper_data'];
    $headers    = array();
    foreach ( $rawHeaders as $lineContent )
    {
        // Extract header values
        if ( preg_match( '(^HTTP/(?P<version>\d+\.\d+)\s+(?P<status>\d+))S', $lineContent, $match ) )
        {
            $headers['version'] = $match['version'];
            $headers['status']  = (int) $match['status'];
        }
        else
        {
            list( $key, $value ) = explode( ':', $lineContent, 2 );
            $headers[strtolower( $key )] = ltrim( $value );
        }
    }

    // @HACK: Ugly hack. Detect auth fail by matching agaisnt the location
    // header. CouchDB answers with 200 OK on failed, but required, auth.
    if ( isset( $headers['location'] ) &&
         preg_match( '(/session.*reason=(?P<reason>.*)$)', $headers['location'], $match ) )
    {
        throw new Exception( "Auth failure: " . urldecode( $match['reason'] ) );
    }

    if ( $headers['status'] >= 400 )
    {
        throw new Exception( "Server returned with error: " . $headers['status'] . " for URL $url\n\n" . $body );
    }

    return $body;
}

/**
 * Get mime type for a file
 *
 * @param string $file
 * @return string
 */
function getMimeType( $file )
{
    switch ( strtolower( pathinfo( $file, PATHINFO_EXTENSION ) ) )
    {
        case 'htm':
        case 'html':
            return 'text/html';

        case 'css':
            return 'text/css';

        case 'js':
            return 'application/javascript';

        default:
            $fileInfoHandler = finfo_open( FILEINFO_MIME_TYPE );
            $mimeType = finfo_file( $fileInfoHandler, $file );
            finfo_close( $fileInfoHandler );
            return $mimeType;
    }
}

